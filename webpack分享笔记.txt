10笔记 
每次输入webpack, 都会最先调用node_modules/.bin/webpack脚本

阶段
1. webpack配置参数初始化阶段
加载配置文件和shell后缀参数申明的插件
执行node_modules/.bin/webpack脚本。获取配置项以及在终端中输入的参数
config.optimist.js中进行命令行中参数的解析
convert-argv.js 根据对应的argv中的参数决定是否加载对应的插件


2. 编译与构建流程
根据传入的options对象，开始整个打包最漫长的一步，这个时候，webpack对象才刚被初始化，初始化逻辑在lib/webpack.js中
function webpack(options){
	let compiler;
	compiler = new Compiler();
	.../
	return compiler;
}

webpack打包的执行入口是Compiler的run方法， 一旦run之后，就开始了编译和构建流程
webpack打包中的几个关键webpack事件节点

compile开始编译
make 从入口点开始分析模块及其依赖的模块，创建这些模块的对象
build-module 构建模块
after-compile 完成构建
seal 封装构建结果
emit 把各个chunk输出到结果文件
after-emit 完成输出

1. 核心对象Compilation
compiler.run后首先会触发compile，这一步会构建出complication对象

complicaton两个作用
一个是负责组织整个打包过程，包括了每个构建环节的输出环节所对应的方法，比如说addEntry(),_addModuleChain()，buildModule()，seal()，createChunkAssets(), 在每个节点都会触发webpack事件去调用各插件

二是该对象内部存放着所有module，chunk，生成的asset以及用来生成最后打包文件的tempplate信息

2.编译与构建主流程
在创建module之前，Compiler会触发make, 并调用Complication.addEntry方法，通过options对象的entry字段找到入口js文件，之后，在addEntry中调用私有方法_addModuleChain

_addModuleChain作用
	1.根据模块类型获取对应的模块工厂并创建模块
	2.构建模块

构建模块耗时，细化分为三步
	1.调用各loader处理模块之间的依赖
	webpack可以把所有的资源整合成模块，不仅仅是js文件，所以需要一些loader对文件进行处理，webpack调用doBuild() 对每一个require()对应的loader进行加工，最后生成一个js bundle

	2. 调用acorn解析loader处理后的源文件生成抽象语法树

	3. 遍历AST，构建该模块所需要的依赖的模块
	对于当前模块，或许存在着多个依赖的模块，当前模块会开辟一个依赖模块的数组，在遍历AST时，将require()中的模块通过addDependency()添加倒数组中，当前模块构建完成之后，webpack调用processModuleDependencies开始递归处理依赖的module,接着就会重复之前的构建步骤

3. 构建细节
module是webpack构建的核心实体，也是所有module的父类，它有几种不同子类：NormalModule，MultiModule, ContextModule, DelegatedModule等。但是这些核心实体都是在构建中都会调用对应的方法，也就是build()


对于每一个module，它都会有这样一个构建方法。当然，它还包括了从构建到输出的一系列有关module生命周期的函数，我们通过module父类类图其子类类图()，这里以NormalModule为例观察其真实形态


打包输出
在所有模块极其依赖的模块build完成后，webpack会监听seal事件调用各插件对构建后的结果进行封装，要逐次对每一个module和chunk进行整理，生成编译之后的源码，合并，拆分，生成hash。同时这是我们在开发时进行代码优化和功能添加的关键环节

不同的Template
通过判断是入口js还是异步加载js来选择不同的模板对象进行封装，入口js会采用webpack事件流的render事件来触发Template类中的renderChunkModules()（异步加载js会调用chunkTempalte中的render方法）

template一共有四个Template子类
分别是 MainTemplate 对entry模块处理
	chunkTemplate 对异步加载模块的处理
	ModuleTemplate 对所有模块进行代码生成
	HotUpdateChunkTemplate 对热替换模块的处理

生成assets 
各模块进行doBlock后，把module的最终代码循环加到source中，一个source对应着一个asset对象，改对象保存了单个文件的文件名和最终代码

输出 
最后webpack调用Compiler中的emitAssets()，按照output中的配置项将文件输出到对应的path文件夹中，从而webpack整个打包结束，如果相对结果进行处理，则需要在emit触发后对自定义插件进行扩展

webpack整体流程主要依赖compilation和module两个对象， webpack本质上是一个插件的集合，并且由tapable控制各插件在webpack事件流上运行， 在业务中，无论是为了提升构建的效率，或是减少打包的大小，我们都可以通过编写webpack插件来进行流程的控制

打包文件流程 
webpack.js中compiler.options = new WebpackOptionsApply().process(options, compiler);
-->

WebpackOptionsApply.js 根据webpack options进行初始化操作  
compiler.apply(new EntryOptionPlugin());
-->

MultiEntryPlugin.js
SingleEntryPlugin.js
DynamicEntryPlugin.js

三个文件都会触发make事件，并且调用compilation.addEntry方法

-->
调用_addModuleChain根据模块类型获取对应的模块工厂并创建模块，构建模块



tapable

webpack本质上是一种事件流机制，他的工作流程就是将各个插件串联起来，而实现这一切的核心就是tapable
webpack中最核心的负责编译的compiler和负责创建bundles的compilation都是tapable的子类


webpack是高度复杂插件的集合，tapable提供对事件的注册，和触发

所有的hook的构造函数均接受一个可选的string类型的数组

对于syncHook，通过tap添加插件，通过call来触发钩子上绑定的插件的顺序执行

对于非sync*类型的钩子，即async*类型的钩子可以通过tap tapAsync tapPromise注册事件，通过call promise callAsync调用事件

.promsie 事件执行之后返回promise对象， 注册时候的函数也返回promise对象
.callAsync 事件执行时，执行回调函数


通过上面的例子，可能大致已经了解tapable用法以及作用
1. 插件注册数量
2. 插件注册的类型(sync, async, promise) 方法tap, tapAsync, tapPromise
3. 插件调用的方式(sync, async, promise) 方法call, callAsync, promise
4. 在实例化钩子的时候，参数的数量
5. 是否使用interception

tapable
sync*
	SyncHook
	SyncBailHook
	SyncWaterfailHook
	SyncLoopHook

async*
	asyncParallel*
		AsyncParallelHook
		AsyncParallelBailHook
		
	asyncSeries*
		AsyncSeriesHook
		AsyncSeriesBailHook
		AsyncSeriesWaterFallHook


sync 同步，
以sync开头的的钩子都是顺序执行的，
并且只能使用tap注册事件，
不能使用tapPromise, tapAsync注册

//所有的钩子都继承于Hook
class Sync* extends Hook { 
	tapAsync() { // Sync*类型的钩子不支持tapAsync
		throw new Error("tapAsync is not supported on a Sync*");
	}
	tapPromise() {// Sync*类型的钩子不支持tapPromise
		throw new Error("tapPromise is not supported on a Sync*");
	}
	compile(options) { // 编译代码来按照一定的策略执行Plugin
		factory.setup(this, options);
		return factory.create(options);
	}
}

对于async开头的钩子都可以使用tap, tapAsync, tapPromise进行注册事件

每次调用tap, tapPromise, tapAsync注册不同类型的插件钩子， 通过call, promise, callAsync方式进行调用。其实调用的时候为了按照一定的执行策略执行，调用compile方法快速编译出一个方法来执行这些插件



webpack初始化文件实际上就是初始化了一个compiler，并且调用了run()方法，开始编译，webpack的编译都按照下面的钩子调用顺序进行执行

before-run 清除缓存
run 注册缓存数据钩子
before-compiler
compiler 开始编译
make 从入口分析依赖以及间接依赖模块，创建模块对象
build-module 模块构建
seal 构建结果封装，不可再更改
after-compiler 完成构建，缓存数据
emit 输出到dist目录


编译&构建流程
webpack中负责编译和构建的都是compilation


webpackmake钩子中，tapAsync注册了DellEntryPlugin, 将入口模块通过调用compilation.addEntry方法，将所有的入口模块添加到编译构建队列中，开始编译流程

compilation.addEntry中调用this._addModuleChain开始编译，在_addModuleChain首先会生成模块，最后构建

在编译完成之后， 调用compilation.seal方法封闭，生成资源，这些资源保存在compilation.assets中，compilation.chunk， 在给webpak写插件的时候会用到


钩子

钩子(Hook) 就是一些具有既定生命周期的框架工具，在生命周期的各个阶段预留给用户执行一些特定操作的口子，这其实是一种面向切面编程

这里有两个关键词 既定生命周期 和 面向切面编程

只有拥有既定的生命周期的框架工具才需要预留用户自定义操作的口子
gulp 的工作方式是定义一个串行的任务管道流，你可以自由的拼接各种任务，这就叫做没有既定生命周期，这时候钩子毫无意义
但是webpack就不太一样，他已经定义好了分析，编译，打包，输出的整个流程，倘若你想在编译结束之后打包输出之前做的一些事情，而webpack有不给你任何介入的钩子，那么做任何努力都是白费，这就是钩子的意义所在

面向切面：在框架运行到某一个阶段，插入一刀，进行一个或者多个特定操作



tapable总结

同步钩子只能使用tap注册钩子，异步钩子tap, tapPromise, tapAsync都可以注册，使用tap注册的包含异步逻辑的插件，tapable不会等待异步处理部分执行完毕，同步执行部分结束之后会立马执行callSync和promise.then()中的回调函数，所以一般官方不推荐使用tap注册包含异步逻辑的插件，因为没有意义

同步钩子使用call触发，但是也可以使用callSync和promise触发

异步钩子不能使用call触发，只能使用callSync, promisec触发

每次触发钩子，都会把钩子上面的插件从头开始执行一次

尽量不要在一个钩子上使用不同的注册方式注册插件tap tapPromise tapAsync

使用callAsync调用钩子的时候，传入的参数需要和钩子实例化时候参数数量保持一致

使用call进行钩子调用，钩子上所有插件执行完毕之后不会有任何的触发，
使用callAsync会触发回调函数
使用promise会返回一个Promsie对象


webpack打包流程，钩子，以及钩子的作用时间
1. 配置项初始化 webpack.js中进行
代码： options = new WebpackOptionsDefaulter().process(options);

2. webpack运行环境初始化
beforeRun钩子
new NodeEnvironmentPlugin().apply(compiler);
NodeEnvironmentPlugin.js 里面在钩子beforerun上注册了一个
compiler.hooks.beforeRun.tap("NodeEnvironmentPlugin", compiler => {
	if (compiler.inputFileSystem === inputFileSystem) inputFileSystem.purge();
});


















